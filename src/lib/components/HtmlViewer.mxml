<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="onComplete()" 
	width="100%" height="100%">


	<mx:Script>
	<![CDATA[

	import mx.core.FlexHTMLLoader;
	import mx.resources.Locale;

	public var scaleFactor:Number = 1.1;
	public var fontMagnification:Number = 1;
	
	// per-page stati info
	protected var renderCount:int = 0;
	protected var fiddled:Boolean = false;
	
	protected var renderExecQueue:Array = [];
	
	public var privateSheet:Object, fontRule:Object;

	private function onComplete():void {
		bindKeys();
		
		this.addEventListener(FocusEvent.FOCUS_IN, handleFocusChange);

		html.addEventListener(Event.COMPLETE, handleHTMLComplete);
		
		html.addEventListener(Event.HTML_RENDER, handleRender);
		html.addEventListener(Event.HTML_DOM_INITIALIZE, handleDOMInit);	

		// events to bubble up
		html.addEventListener(Event.LOCATION_CHANGE, handleLocationChange);
	}
	
	private function handleRender(event:Event):void {
		// renderCount++;
		// trace("render!");

		for (var i:int = 0; i < renderExecQueue.length; i++) {
			var func:Function = renderExecQueue[i] as Function;
			func.call(this);
		}
		renderExecQueue = [];
		
		if (renderCount >= 1) {
			return;
		}
		
		var head:Object = getWikiDocument().getElementsByTagName("head");
		if (head == null || head.length == 0) {
			trace("no head yet");
			return;
		}
		trace("got head");
		renderCount++;
		
		fiddleDOM();

	}

	private function fiddleDOM():void {
		if (fiddled) {
			trace("already fiddled");
			return;
		}
		var head:Object = getWikiDocument().getElementsByTagName("head");
		if (head == null || head.length == 0) {
			trace("no head yet");
			return;
		}
		
		var window:Object =  html.htmlLoader.window;
		trace("window is " + window.toString());
		window.addEventListener("domready", handleDOMReady);
		window.addEventListener("domcontentloaded", handleDOMReady);
		window.addEventListener("load", function():void { trace("loaded"); });
		
		trace("fiddleDOM!");		
		synthesizeCSS();
		insertIntrospector();
		adjustFontSize(fontMagnification);
		
		renderExecQueue.push(function():void { html.visible = true; });
		// html.visible = true;
	}

	private function handleDOMInit(event:Event):void {
		trace("dominit!");
		// fiddleDOM();

	}

	private function handleDOMReady():void {
		trace("domready");
	}
	
	private function handleHTMLComplete(event:Event):void {
		fiddleDOM();
	}
	
	private function handleLocationChange(event:Event):void {
		renderCount = 0;
		fiddled = false;
		html.visible = false;
		bubbleEvent(event);		
	}
	
	
	private function handleFocusChange(event:FocusEvent):void {
		// trace("target is " + event.target.toString());
	}
	
	private function bubbleEvent(event:Event):void {
		this.dispatchEvent(event);
	}
	
	private function handleKeyUp(event:KeyboardEvent):void {
		if (event.commandKey || event.ctrlKey) {
			handleCommandKey(event);
		}
	}
	
	public function scaleUp():void {
		trace("Scaling up");
		fontMagnification *= scaleFactor;
		adjustFontSize(fontMagnification);
	}

	public function scaleDown():void {
		trace("Scaling down");
		fontMagnification /= scaleFactor;
		adjustFontSize(fontMagnification);
	}

	public function adjustFontSize(scale:Number):void {
		// trace("previous size is " + fontRule.style['font-size']);
		fontRule.style['font-size'] = '' + int(scale*100) + '%';
		// trace("post size is " + fontRule.style['font-size']);
	}

	private function handleCommandKey(event:KeyboardEvent):void {
		var stop:Boolean = false;
		switch (event.keyCode) {
			default:
				stop = false;
				trace("Unknown control/command key: " + event.keyCode);
		}
		
		if (stop) event.stopPropagation();
	}
	
	private function bindKeys():void {
		this.addEventListener(KeyboardEvent.KEY_UP, handleKeyUp);
		var children:Array = this.getChildren();
		for (var i:int = 0; i < children.length; i++) {
			var child:Object = children[i];
			child.addEventListener(KeyboardEvent.KEY_UP, handleKeyUp);
		}
		
	}

	public function loadURL(url:String):void {
		renderCount = 0;
		html.location = url;
	}

	public function setDocumentFocus():void {
		html.setFocus();
		html.focusManager.setFocus(html.htmlLoader as FlexHTMLLoader);
	}

	// http://www.javascriptkit.com/domref/stylesheet.shtml
	// http://www.howtocreate.co.uk/tutorials/javascript/domstylesheets
	// http://www.aptana.com/reference/html/api/CSSStyleSheet.html
	// http://www.quirksmode.org/dom/changess.html
	// http://www.hunlock.com/blogs/Totally_Pwn_CSS_with_Javascript

	private function synthesizeCSS():void {
		var document:Object = getWikiDocument();
		var ss:Object = document.styleSheets;
		var len:int = ss.length;


		var head:Object = document.getElementsByTagName("head")[0];
		var elt:Object = document.createElement("style");
		elt.type = 'text/css';
		elt.rel = 'stylesheet';
		elt.media = 'screen';
		elt.title = 'dynamicSheet';
		head.appendChild(elt);
		
		len = document.styleSheets.length;
		
		privateSheet = document.styleSheets[document.styleSheets.length-1];
		
		privateSheet.addRule('body', 'font-size: 100%');
		fontRule = privateSheet.cssRules[0];
		
		// hide all but main column
		privateSheet.addRule('#column-one, #footer, #anon-banner', 'display: none');
		privateSheet.addRule('#content', 'margin-left: 0px; margin-top: 0px');
	}

   private function insertIntrospector():void {
       // elt.src = 'app:/lib/sandbox/AIRIntrospector.js';
       // elt.src = 'http://getfirebug.com/releases/lite/1.2/firebug-lite.js';
       // elt.src = 'http://home.local.esquimaux.org/AIRIntrospector.js';
       
       // insertJSFile("http://getfirebug.com/releases/lite/1.2/pi.js");
       // insertJSFile("http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

   }
   
   private function insertJSFile(file:String):void {
       var document:Object = getWikiDocument();
       
       var head:Object = document.getElementsByTagName("head")[0];
       var elt:Object = document.createElement("script");
       elt.type = 'text/javascript';
       elt.src = file;
       head.appendChild(elt);          
   }
   // http://getfirebug.com/releases/lite/1.2/pi.js
   
   public function getWikiDocument():Object {
       return html.htmlLoader.window.document;
   }

	
	]]>
	</mx:Script>

	<!-- the main event -->
	<mx:HTML id="html" width="100%" height="100%"  />
</mx:Canvas>
